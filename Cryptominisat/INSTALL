-----------
Libraries needed
-----------
You will need the following libraries to compile the sources:
* libz

-----------------
Building the source
-----------------
There are two ways to build the source. With cmake or with autotools. I personally use cmake.

-----------------
Building using cmake
-----------------
* Install cmake
* Go into the 'build' directory
* Issue 'cmake ../'
* Issue 'make'
* Issue './cryptominisat satfile' to test your new code.

------------------
Building using autotools
------------------
* Install automake, autoconf, libtool
* Issue 'make -f Makefile.cvs'
* Go to the 'build' directory
* Issue 'CXXFLAGS="-O3 -g -march=native" ../configure'
* Issue 'make'
* Issue './cryptominisat satfile' to test your new code

---------
Please read help
---------
For help, build the program, and issue:
'./cryptominisat -help'

--------
Verbose debug
--------
You can also turn on verbose debugging.
Simply add "#define VERBOSE_DEBUG" to the Solver/Solver.h file and re-compile

When executing:
'./cryptominisat satfile'
You will see a LOT of debug info. You should therefore maybe do:
'./cryptominisat satfile > debuginfo.txt'
then you can open the 'debuginfo.txt' file from a text editor and have a look

-----------------
Windows use
----------------
With cmake it should be relatively simple. If you compile under windows.

I compile under linux all windows binaries, using gcc that generates windows executables. It works really well. There is a sort-of-howto in the src/Solver/win32-howto text file. A short step-by-step is here: 

1) Install gcc that generates windows binaries:

i586-mingw32msvc

1) Install all libraries (libz) 

libz:
get from source and compile as per src/Solver/win32-howto

2) complie:

go to "src/Solver" and do:

i586-mingw32msvc-g++ -O3 -g -DCROSS_COMPILE  -march=i586 -I../mtl/ -I../MTRand/ Main.C /usr/i586-mingw32msvc/lib/libz.a Solver.C Logger.C fcopy.cpp clause.cpp -o cryptominisat.exe

I test the generated binary under wine, in Linux.
